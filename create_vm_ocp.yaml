---
- name: Create a VM on OpenShift Virtualization and extract IPv4
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    vm_name: apache-vm
    vm_project: vm-migration-test
    storage_class: nfs-storage-class
    storage_size: 15Gi
    memory_size: 2Gi
    cpu_cores: 2
    cpu_sockets: 1
    cpu_threads: 1
    cloud_init_password: password
    network_attachment: br-ex-network
    ip_poll_interval: 10
    max_ip_retries: 60

  tasks:
    - name: Display VM configuration
      debug:
        msg:
          - "Creating VM: {{ vm_name }}"
          - "Namespace: {{ vm_project }}"
          - "Memory: {{ memory_size }}"
          - "CPU Cores: {{ cpu_cores }}"
          - "Storage Class: {{ storage_class }}"
          - "Network: {{ network_attachment }}"

    - name: Provision Virtual Machine in OpenShift
      kubernetes.core.k8s:
        state: present
        validate_certs: no
        definition:
          apiVersion: kubevirt.io/v1
          kind: VirtualMachine
          metadata:
            name: "{{ vm_name }}"
            namespace: "{{ vm_project }}"
          spec:
            running: true
            dataVolumeTemplates:
              - metadata:
                  name: "{{ vm_name }}"
                  annotations:
                    cdi.kubevirt.io/storage.bind.immediate.requested: "true"
                spec:
                  source:
                    pvc:
                      name: centos9-golden-image
                      namespace: "{{ vm_project }}"
                  storage:
                    storageClassName: "{{ storage_class }}"
                    accessModes: ["ReadWriteMany"]
                    volumeMode: Filesystem
                    resources:
                      requests:
                        storage: "{{ storage_size }}"
            template:
              metadata:
                labels:
                  kubevirt.io/domain: "{{ vm_name }}"
              spec:
                domain:
                  cpu:
                    cores: "{{ cpu_cores }}"
                    sockets: "{{ cpu_sockets }}"
                    threads: "{{ cpu_threads }}"
                  memory:
                    guest: "{{ memory_size }}"
                  devices:
                    disks:
                      - name: rootdisk
                        disk:
                          bus: virtio
                      - name: cloudinitdisk
                        disk:
                          bus: virtio
                    interfaces:
                      - name: default
                        bridge: {}
                networks:
                  - name: default
                    multus:
                      networkName: "{{ network_attachment }}"
                volumes:
                  - name: rootdisk
                    dataVolume:
                      name: "{{ vm_name }}"
                  - name: cloudinitdisk
                    cloudInitNoCloud:
                      networkData: |
                        version: 2
                        ethernets:
                          eth0:
                            dhcp4: true
                            dhcp6: false
                      userData: |
                        #cloud-config
                        user: root
                        password: {{ cloud_init_password }}
                        chpasswd: { expire: False }
                        ssh_pwauth: True
                        runcmd:
                          - sed -i 's/^#\?PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config
                          - sed -i 's/^#\?PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config
                          - systemctl restart sshd
                          - systemctl enable sshd
      register: vm_creation

    - name: Wait for DataVolume to be ready
      kubernetes.core.k8s_info:
        api_version: cdi.kubevirt.io/v1beta1
        kind: DataVolume
        name: "{{ vm_name }}"
        namespace: "{{ vm_project }}"
        validate_certs: no
      register: dv_info
      until:
        - dv_info.resources | length > 0
        - dv_info.resources[0].status.phase == "Succeeded"
      retries: 60
      delay: 10

    - name: Wait for VM to be running
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        name: "{{ vm_name }}"
        namespace: "{{ vm_project }}"
        validate_certs: no
      register: vmi_info
      until:
        - vmi_info.resources | length > 0
        - vmi_info.resources[0].status.phase == "Running"
      retries: 60
      delay: 10

    - name: Poll VM for IPv4 address (guest agent or SSH fallback)
      block:
        - name: Poll VMI status for IPv4 (guest agent)
          kubernetes.core.k8s_info:
            api_version: kubevirt.io/v1
            kind: VirtualMachineInstance
            name: "{{ vm_name }}"
            namespace: "{{ vm_project }}"
            validate_certs: no
          register: vmi_network_info
          until: >-
            (vmi_network_info.resources | length > 0) and
            ((vmi_network_info.resources[0].status.interfaces | default([]) |
            map(attribute='ipAddresses') |
            select('defined') |
            map('flatten') |
            flatten |
            select('match', '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$') |
            list | length) > 0)
          retries: "{{ max_ip_retries }}"
          delay: "{{ ip_poll_interval }}"
          ignore_errors: true

        - name: Extract IPv4 from guest agent
          when: vmi_network_info.resources | length > 0
          set_fact:
            vm_ipv4_addresses: >-
              {{
                (vmi_network_info.resources[0].status.interfaces | default([])) |
                map(attribute='ipAddresses') |
                select('defined') |
                map('flatten') |
                flatten |
                select('match', '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$') |
                list
              }}
            vm_ip: "{{ vm_ipv4_addresses[0] if vm_ipv4_addresses | length > 0 else 'No IPv4 assigned' }}"

        - name: Debug detected guest agent IPs
          debug:
            msg:
              - "Detected IPv4 addresses via guest agent: {{ vm_ipv4_addresses | default([]) | join(', ') }}"
              - "Selected primary IP: {{ vm_ip | default('No IPv4 assigned') }}"

        - name: Fallback Extract IPv4 via SSH if guest agent failed
          when: vm_ip == 'No IPv4 assigned'
          block:
            - name: Wait for SSH to be available
              wait_for:
                host: "{{ (vmi_network_info.resources[0].status.interfaces[0].ipAddresses[0] | default('127.0.0.1')) }}"
                port: 22
                timeout: 120
                delay: 10
              ignore_errors: true

            - name: Extract IPv4 via SSH
              shell: |
                sshpass -p '{{ cloud_init_password }}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
                  root@{{ (vmi_network_info.resources[0].status.interfaces[0].ipAddresses[0] | default('127.0.0.1')) }} \
                  "ip -4 addr show eth0 | grep -oP '(?<=inet\\s)\\d+(\\.\\d+){3}' | head -1"
              register: vm_internal_ip
              ignore_errors: true
              changed_when: false

            - name: Set IPv4 from SSH fallback
              when: vm_internal_ip.rc == 0 and vm_internal_ip.stdout | length > 0
              set_fact:
                vm_ip: "{{ vm_internal_ip.stdout | trim }}"
                vm_ipv4_addresses: [ "{{ vm_internal_ip.stdout | trim }}" ]

        - name: Fail if IPv4 still missing
          when: vm_ip == '' or vm_ip == 'No IPv4 assigned'
          fail:
            msg: >
              ERROR: No IPv4 address obtained for {{ vm_name }}.
              Guest agent and SSH fallback both failed.

    - name: Check guest agent status
      set_fact:
        guest_agent_connected: >-
          {{
            (vmi_network_info.resources[0].status.conditions | default([]) |
            selectattr('type', 'equalto', 'AgentConnected') |
            map(attribute='status') | first | default('Unknown'))
          }}

    - name: Display VM deployment summary
      debug:
        msg:
          - "======================================"
          - "VM Deployment Complete Successfully!"
          - "VM Name: {{ vm_name }}"
          - "IPv4 Address: {{ vm_ip }}"
          - "All IPv4 Addresses: {{ vm_ipv4_addresses | join(', ') }}"
          - "Username: root"
          - "Password: {{ cloud_init_password }}"
          - "Network: {{ network_attachment }}"
          - "Guest Agent: {{ guest_agent_connected }}"
          - "======================================"
