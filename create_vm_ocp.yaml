---
- name: Create a VM on OpenShift Virtualization and extract IPv4
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    vm_name: apache-vm
    vm_project: vm-migration-test
    storage_class: nfs-storage-class
    storage_size: 15Gi
    memory_size: 2Gi
    cpu_cores: 2
    cpu_sockets: 1
    cpu_threads: 1
    cloud_init_password: password
    ssh_timeout: 300
    network_attachment: br-ex-network
    
    # Increased for guest agent to report IPv4
    ip_poll_interval: 10
    max_ip_retries: 18  # 18 * 10 = 180 seconds (3 minutes)

  tasks:
    - name: Display VM configuration
      debug:
        msg:
          - "Creating VM: {{ vm_name }}"
          - "Namespace: {{ vm_project }}"
          - "Memory: {{ memory_size }}"
          - "CPU Cores: {{ cpu_cores }}"
          - "Storage Class: {{ storage_class }}"
          - "Network: {{ network_attachment }}"

    - name: Provision Virtual Machine in OpenShift
      kubernetes.core.k8s:
        state: present
        validate_certs: no
        definition:
          apiVersion: kubevirt.io/v1
          kind: VirtualMachine
          metadata:
            name: "{{ vm_name }}"
            namespace: "{{ vm_project }}"
            labels:
              app: "{{ vm_name }}"
          spec:
            running: true
            dataVolumeTemplates:
              - metadata:
                  name: "{{ vm_name }}"
                  annotations:
                    cdi.kubevirt.io/storage.bind.immediate.requested: "true"
                spec:
                  source:
                    pvc:
                      name: centos9-golden-image
                      namespace: "{{ vm_project }}"
                  storage:
                    storageClassName: "{{ storage_class }}"
                    accessModes: [ "ReadWriteMany" ]
                    volumeMode: Filesystem
                    resources:
                      requests:
                        storage: "{{ storage_size }}"
            template:
              metadata:
                labels:
                  kubevirt.io/domain: "{{ vm_name }}"
              spec:
                domain:
                  cpu:
                    cores: "{{ cpu_cores }}"
                    sockets: "{{ cpu_sockets }}"
                    threads: "{{ cpu_threads }}"
                  memory:
                    guest: "{{ memory_size }}"
                  devices:
                    disks:
                      - name: rootdisk
                        disk: { bus: virtio }
                      - name: cloudinitdisk
                        disk: { bus: virtio }
                    interfaces:
                      - name: default
                        bridge: {}
                networks:
                  - name: default
                    multus:
                      networkName: "{{ network_attachment }}"
                volumes:
                  - name: rootdisk
                    dataVolume:
                      name: "{{ vm_name }}"
                  - name: cloudinitdisk
                    cloudInitNoCloud:
                      networkData: |
                        version: 2
                        ethernets:
                          eth0:
                            dhcp4: true
                            dhcp6: false
                      userData: |
                        #cloud-config
                        user: root
                        password: {{ cloud_init_password }}
                        chpasswd: { expire: False }
                        ssh_pwauth: True
                        runcmd:
                          - sed -i 's/^#\?PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config
                          - sed -i 's/^#\?PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config
                          - systemctl restart sshd
                          - systemctl enable sshd
      register: vm_creation

    - name: Display VM creation result
      debug:
        msg: "VM {{ vm_name }} provisioned successfully in namespace {{ vm_project }}"
      when: vm_creation.changed

    - name: Wait for DataVolume to be ready
      kubernetes.core.k8s_info:
        api_version: cdi.kubevirt.io/v1beta1
        kind: DataVolume
        name: "{{ vm_name }}"
        namespace: "{{ vm_project }}"
        validate_certs: no
      register: dv_info
      until:
        - dv_info.resources is defined
        - dv_info.resources | length > 0
        - (dv_info.resources[0].status.phase | default('')) == "Succeeded"
      retries: 60
      delay: 10

    - name: Display DataVolume status
      debug:
        msg: "DataVolume for {{ vm_name }} is ready (Phase: {{ dv_info.resources[0].status.phase }})"

    - name: Wait for VM to be running
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        name: "{{ vm_name }}"
        namespace: "{{ vm_project }}"
        validate_certs: no
      register: vmi_info
      until:
        - vmi_info.resources is defined
        - vmi_info.resources | length > 0
        - (vmi_info.resources[0].status.phase | default('')) == "Running"
      retries: 60
      delay: 10

    - name: Display VM running status
      debug:
        msg: "VM {{ vm_name }} is now running, waiting for guest agent to report IPv4..."

    - name: Wait for VM to get an IPv4 address (with guest agent polling)
      vars:
        vm_ip: "No IPv4 assigned"
      block:
        - name: Poll VM network info for IPv4 (waiting for guest agent)
          kubernetes.core.k8s_info:
            api_version: kubevirt.io/v1
            kind: VirtualMachineInstance
            name: "{{ vm_name }}"
            namespace: "{{ vm_project }}"
            validate_certs: no
          register: vmi_network_info
          until: >-
            (
              vmi_network_info.resources[0].status.interfaces | default([])
              | map(attribute='ipAddresses')
              | select('defined')
              | map('flatten')
              | flatten
              | select('match', '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$')
              | list
              | length
            ) > 0
          retries: "{{ max_ip_retries }}"
          delay: "{{ ip_poll_interval }}"

        - name: Display polling result
          debug:
            msg: "IPv4 address detected! Extracting..."

        - name: Extract IPv4 address safely
          set_fact:
            all_ip_addresses: >-
              {{
                (vmi_network_info.resources[0].status.interfaces | default([]))
                | map(attribute='ipAddresses')
                | select('defined')
                | map('flatten')
                | flatten
                | list
              }}
            vm_ipv4_addresses: >-
              {{
                (vmi_network_info.resources[0].status.interfaces | default([]))
                | map(attribute='ipAddresses')
                | select('defined')
                | map('flatten')
                | flatten
                | select('match', '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$')
                | list
              }}

        - name: Set VM IP to first IPv4
          set_fact:
            vm_ip: "{{ vm_ipv4_addresses[0] if vm_ipv4_addresses | length > 0 else 'No IPv4 assigned' }}"

        - name: Display detected IP addresses
          debug:
            msg:
              - "================================================"
              - "Network Information for {{ vm_name }}"
              - "================================================"
              - "All IPs detected: {{ all_ip_addresses }}"
              - "IPv4 Addresses: {{ vm_ipv4_addresses | join(', ') }}"
              - "Selected IPv4 for SSH: {{ vm_ip }}"
              - "================================================"

        - name: Fail if IPv4 is missing after retries
          fail:
            msg: |
              ERROR: No IPv4 address detected for {{ vm_name }} after {{ max_ip_retries * ip_poll_interval }} seconds
              
              All detected IPs: {{ all_ip_addresses }}
              
              This typically means:
              1. Guest agent (qemu-guest-agent) is not installed in the golden image
              2. Guest agent is not starting properly
              3. DHCP is not providing IPv4 addresses
              4. Network configuration issue
              
              Troubleshooting steps:
              1. Check if VM has IPv4 inside guest OS:
                 virtctl console {{ vm_name }} -n {{ vm_project }}
                 ip addr show eth0
              
              2. Check if guest agent is running inside VM:
                 systemctl status qemu-guest-agent
              
              3. Install guest agent if missing:
                 dnf install qemu-guest-agent
                 systemctl enable --now qemu-guest-agent
              
              4. Check network configuration:
                 oc get network-attachment-definitions {{ network_attachment }} -n {{ vm_project }} -o yaml
          when: vm_ip == 'No IPv4 assigned'

    - name: Check guest agent status
      set_fact:
        guest_agent_connected: >-
          {{
            (vmi_network_info.resources[0].status.conditions | default([])
            | selectattr('type', 'equalto', 'AgentConnected')
            | map(attribute='status')
            | first | default('Unknown'))
          }}

    - name: Display guest agent status
      debug:
        msg: "Guest agent connected: {{ guest_agent_connected }}"

    - name: Save IPv4 for downstream jobs
      set_stats:
        data:
          vm_ip: "{{ vm_ip }}"
          vm_ipv4: "{{ vm_ipv4_addresses | join(',') }}"
          vm_name: "{{ vm_name }}"
          vm_project: "{{ vm_project }}"
        per_host: no

    - name: Get VM information
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachine
        name: "{{ vm_name }}"
        namespace: "{{ vm_project }}"
        validate_certs: no
      register: vm_info

    - name: Display VM information
      debug:
        msg:
          - "VM Name: {{ vm_info.resources[0].metadata.name }}"
          - "Namespace: {{ vm_info.resources[0].metadata.namespace }}"
          - "CPU Cores: {{ vm_info.resources[0].spec.template.spec.domain.cpu.cores }}"
          - "CPU Sockets: {{ vm_info.resources[0].spec.template.spec.domain.cpu.sockets }}"
          - "CPU Threads: {{ vm_info.resources[0].spec.template.spec.domain.cpu.threads }}"
          - "Memory: {{ vm_info.resources[0].spec.template.spec.domain.memory.guest }}"
          - "Storage Size: {{ storage_size }}"
          - "Storage Class: {{ storage_class }}"
          - "VM Status: {{ vm_info.resources[0].status.printableStatus | default('Starting') }}"
          - "Network: {{ network_attachment }}"

    - name: Deployment Summary
      debug:
        msg:
          - "======================================"
          - "VM Deployment Complete Successfully!"
          - "======================================"
          - "VM Name: {{ vm_name }}"
          - "IPv4 Address: {{ vm_ip }}"
          - "All IPv4 Addresses: {{ vm_ipv4_addresses | join(', ') }}"
          - "Username: root"
          - "Password: {{ cloud_init_password }}"
          - "Network: {{ network_attachment }}"
          - "Guest Agent: {{ guest_agent_connected }}"
          - "======================================"
          - "Variables exported for downstream jobs:"
          - "  - vm_ip: {{ vm_ip }}"
          - "  - vm_name: {{ vm_name }}"
          - "  - vm_project: {{ vm_project }}"
          - "=========================================="
