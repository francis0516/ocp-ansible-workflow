---
- name: Create a VM on OpenShift Virtualization and extract IPv4
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    vm_name: apache-vm
    vm_project: vm-migration-test
    storage_class: nfs-storage-class
    storage_size: 15Gi
    memory_size: 2Gi
    cpu_cores: 2
    cpu_sockets: 1
    cpu_threads: 1
    cloud_init_password: password
    ssh_timeout: 300
    network_attachment: br-ex-network
    ip_wait_time: 30
    ip_poll_interval: 10
    max_ip_retries: 30

  tasks:
    - name: Display VM configuration
      debug:
        msg:
          - "Creating VM: {{ vm_name }}"
          - "Namespace: {{ vm_project }}"
          - "Memory: {{ memory_size }}"
          - "CPU Cores: {{ cpu_cores }}"
          - "Storage Class: {{ storage_class }}"
          - "Network: {{ network_attachment }}"

    - name: Provision Virtual Machine in OpenShift
      kubernetes.core.k8s:
        state: present
        validate_certs: no
        definition: "{{ lookup('file', 'vm_definition.yaml') }}"
      register: vm_creation

    - name: Wait for DataVolume to be ready
      kubernetes.core.k8s_info:
        api_version: cdi.kubevirt.io/v1beta1
        kind: DataVolume
        name: "{{ vm_name }}"
        namespace: "{{ vm_project }}"
        validate_certs: no
      register: dv_info
      until:
        - dv_info.resources is defined
        - dv_info.resources | length > 0
        - dv_info.resources[0].status.phase == "Succeeded"
      retries: 30
      delay: 10

    - name: Wait for VM to be running
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        name: "{{ vm_name }}"
        namespace: "{{ vm_project }}"
        validate_certs: no
      register: vmi_info
      until:
        - vmi_info.resources is defined
        - vmi_info.resources | length > 0
        - vmi_info.resources[0].status.phase == "Running"
      retries: 30
      delay: 10

    - name: Fetch VM network info repeatedly until IPv4 is assigned
      vars:
        vm_ip: "No IPv4 assigned"
      block:
        - name: Get latest VM network info
          kubernetes.core.k8s_info:
            api_version: kubevirt.io/v1
            kind: VirtualMachineInstance
            name: "{{ vm_name }}"
            namespace: "{{ vm_project }}"
            validate_certs: no
          register: vmi_network_info

        - name: Extract IPv4 from all interfaces
          set_fact:
            interfaces_list: "{{ vmi_network_info.resources[0].status.interfaces | default([]) }}"
            all_ip_addresses: >-
              {{
                (
                  interfaces_list
                  | map(attribute='ipAddresses')
                  | select('defined')
                  | map('flatten')
                  | list
                )
                + (
                  interfaces_list
                  | selectattr('ipAddress', 'defined')
                  | map(attribute='ipAddress')
                  | list
                )
              }}
            ipv4_candidates: "{{ all_ip_addresses | select('match', '^(\\d{1,3}\\.){3}\\d{1,3}$') | list }}"
            vm_ip: "{{ (ipv4_candidates | first) | default('No IPv4 assigned') }}"
          until: vm_ip != 'No IPv4 assigned'
          retries: "{{ max_ip_retries }}"
          delay: "{{ ip_poll_interval }}"

    - name: Fail if IPv4 is missing after retries
      fail:
        msg: "No IPv4 address detected for {{ vm_name }} after waiting. Check DHCP/Multus."
      when: vm_ip == 'No IPv4 assigned'

    - name: Display IPv4 extraction result
      debug:
        msg:
          - "======================================"
          - "VM Name: {{ vm_name }}"
          - "All IPs Detected: {{ all_ip_addresses | join(', ') | default('None') }}"
          - "IPv4 Addresses: {{ ipv4_candidates | join(', ') | default('None detected') }}"
          - "Selected IPv4: {{ vm_ip }}"
          - "======================================"

    - name: Save IPv4 for downstream jobs
      set_stats:
        data:
          vm_ip: "{{ vm_ip }}"
          vm_name: "{{ vm_name }}"
          vm_project: "{{ vm_project }}"
        per_host: no

    - name: Deployment Summary
      debug:
        msg:
          - "======================================"
          - "VM Deployment Complete Successfully!"
          - "VM Name: {{ vm_name }}"
          - "IPv4 Address: {{ vm_ip }}"
          - "Username: root"
          - "Password: {{ cloud_init_password }}"
          - "Network: {{ network_attachment }}"
          - "======================================"
